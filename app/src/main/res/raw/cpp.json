{
    "KeyWord": [
   {"-name":"if" },
   {"-name":"elif" },
   {"-name":"else" },
   {"-name":"endif" },
   {"-name":"defined" },
   {"-name":"ifdef" },
   {"-name":"ifndef" },
   {"-name":"define" },
   {"-name":"undef" },
   {"-name":"include" },
   {"-name":"line" },
   {"-name":"error" },
   {"-name":"pragma" },
   {"-name":"alignas" },
   {"-name":"alignof" },
   {"-name":"and" },
   {"-name":"and_eq" },
   {"-name":"asm" },
   {"-name":"auto" },
   {"-name":"bitand" },
   {"-name":"bitor" },
   {"-name":"bool" },
   {"-name":"break" },
   {"-name":"case" },
   {"-name":"catch" },
   {"-name":"char" },
   {"-name":"char16_t" },
   {"-name":"char32_t" },
   {"-name":"class" },
   {"-name":"compl" },
   {"-name":"concept" },
   {"-name":"const" },
   {"-name":"constexpr" },
   {"-name":"const_cast" },
   {"-name":"continue" },
   {"-name":"decltype" },
   {"-name":"default" },
   {"-name":"delete" },
   {"-name":"do" },
   {"-name":"double" },
   {"-name":"dynamic_cast" },
   {"-name":"else" },
   {"-name":"enum" },
   {"-name":"explicit" },
   {"-name":"export" },
   {"-name":"extern" },
   {"-name":"false" },
   {"-name":"float" },
   {"-name":"for" },
   {"-name":"friend" },
   {"-name":"goto" },
   {"-name":"if" },
   {"-name":"inline" },
   {"-name":"int" },
   {"-name":"long" },
   {"-name":"mutable" },
   {"-name":"namespace" },
   {"-name":"new" },
   {"-name":"noexcept" },
   {"-name":"not" },
   {"-name":"not_eq" },
   {"-name":"nullptr" },
   {"-name":"operator" },
   {"-name":"or" },
   {"-name":"or_eq" },
   {"-name":"private" },
   {"-name":"protected" },
   {"-name":"public" },
   {"-name":"register" },
   {"-name":"reinterpret_cast" },
   {"-name":"requires" },
   {"-name":"return" },
   {"-name":"short" },
   {"-name":"signed" },
   {"-name":"sizeof" },
   {"-name":"static" },
   {"-name":"static_assert" },
   {"-name":"static_cast" },
   {"-name":"struct" },
   {"-name":"switch" },
   {"-name":"template" },
   {"-name":"this" },
   {"-name":"thread_local" },
   {"-name":"throw" },
   {"-name":"true" },
   {"-name":"try" },
   {"-name":"typedef" },
   {"-name":"typeid" },
   {"-name":"typename" },
   {"-name":"union" },
   {"-name":"unsigned" },
   {"-name":"using" },
   {"-name":"virtual" },
   {"-name":"void" },
   {"-name":"volatile" },
   {"-name":"wchar_t" },
   {"-name":"while" },
   {"-name":"xor" },
   {"-name":"xor_eq" }

    ]
  }
