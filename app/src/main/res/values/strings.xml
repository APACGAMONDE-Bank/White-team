<?xml version="1.0" encoding="utf-8"?>
<!--
/*
**
** Copyright 2008, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- Title for Latin keyboard  -->
    <string name="ime_name">White-team KeyBoard</string>

    <!-- Symbols that are commonly considered word separators in this language -->
    <string name="word_separators">\u0020.,;:!?\n()[]*&amp;@{}/&lt;&gt;_+=|&quot;</string>
    
    <!-- Labels on soft keys -->
    <string name="label_go_key">Go</string>
    <string name="label_next_key">Next</string>
    <string name="label_send_key">Send</string>

    <!-- Labels for subtype -->
    <string name="label_subtype_generic">%s</string>
    <string name="label_subtype_en_GB">English (GB)</string>

    <!-- Titles for ImePreference -->
    <string name="settings_name">42 Soft Keyboard Settings</string>
    <string name="language_selection_title">Input languages</string>
    <string name="select_language">Select input languages</string>
    <string name="general_category">General</string>
    <string name="cppJson">{  "NotepadPlus": {    "parsererror": {      "-style": "display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black",      "h3": [        "This page contains the following errors:",        "Below is a rendering of the page up to the first error."      ],      "div": {        "-style": "font-family:monospace;font-size:12px",        "#text": "error on line 1126 at column 26: xmlParseEntityRef: no name"      }    },    "AutoComplete": {      "-language": "C++",      "Environment": {        "-ignoreCase": "no",        "-startFunc": "(",        "-stopFunc": ")",        "-paramSeparator": ",",        "-terminal": ";"      },      "KeyWord": [        { "-name": "#define" },        { "-name": "#elif" },        { "-name": "#else" },        { "-name": "#endif" },        { "-name": "#error" },        { "-name": "#if" },        { "-name": "#ifdef" },        { "-name": "#ifndef" },        { "-name": "#include" },        { "-name": "#line" },        { "-name": "#pragma" },        { "-name": "#undef" },        {          "-name": "abort",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "void" }          }        },        {          "-name": "abs",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int i" }          }        },        { "-name": "absread" },        { "-name": "abswrite" },        {          "-name": "access",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "int amode" }            ]          }        },        { "-name": "accumulate" },        {          "-name": "acos",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "acosl" },        { "-name": "address" },        { "-name": "adjacent_difference" },        { "-name": "adjacent_find" },        { "-name": "advance" },        { "-name": "allocate" },        { "-name": "allocator" },        { "-name": "allocmem" },        { "-name": "always_noconv" },        { "-name": "any" },        { "-name": "append" },        { "-name": "arc" },        { "-name": "arg" },        {          "-name": "asctime",          "-func": "yes",          "Overload": {            "-retVal": "char*",            "Param": { "-name": "const struct tm *timeptr" }          }        },        {          "-name": "asin",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "asinl" },        { "-name": "asm" },        {          "-name": "assert",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "int expression" }          }        },        { "-name": "assign" },        { "-name": "at" },        {          "-name": "atan",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        {          "-name": "atan2",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "double y" },              { "-name": "double x" }            ]          }        },        { "-name": "atan2l" },        { "-name": "atanl" },        {          "-name": "atexit",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "void (*func)(void)" }          }        },        {          "-name": "atof",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "const char *nptr" }          }        },        {          "-name": "atoi",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "const char *nptr" }          }        },        {          "-name": "atol",          "-func": "yes",          "Overload": {            "-retVal": "long int",            "Param": { "-name": "const char *nptr" }          }        },        { "-name": "auto" },        { "-name": "auto_ptr" },        { "-name": "back" },        { "-name": "back_inserter" },        { "-name": "back_insert_iterator" },        { "-name": "bad" },        { "-name": "bar" },        { "-name": "bar3d" },        { "-name": "basic_string" },        { "-name": "bcd" },        { "-name": "bdos" },        { "-name": "bdosptr" },        { "-name": "begin" },        { "-name": "bidirectional_iterator" },        { "-name": "binary_function" },        { "-name": "binary_negate" },        { "-name": "binary_search" },        { "-name": "bind1st" },        { "-name": "bind2nd" },        { "-name": "binder1st" },        { "-name": "binder2nd" },        { "-name": "bioscom" },        { "-name": "biosdisk" },        { "-name": "biosequip" },        { "-name": "bioskey" },        { "-name": "biosmemory" },        { "-name": "biosprint" },        { "-name": "biostime" },        { "-name": "bitset" },        { "-name": "bool" },        { "-name": "boolalpha" },        { "-name": "break" },        { "-name": "brk" },        {          "-name": "bsearch",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "const void *key" },              { "-name": "const void *base" },              { "-name": "size_t nmemb" },              { "-name": "size_t size" },              { "-name": "int (*compar)(const void *, const void *)" }            ]          }        },        { "-name": "cabs" },        { "-name": "cabsl" },        {          "-name": "calloc",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "size_t nmemb" },              { "-name": "size_t size" }            ]          }        },        { "-name": "capacity" },        { "-name": "case" },        { "-name": "catch" },        { "-name": "category" },        {          "-name": "ceil",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "ceill" },        { "-name": "cerr" },        { "-name": "cgets" },        { "-name": "char" },        { "-name": "char_type" },        {          "-name": "chdir",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "const char *path" }          }        },        {          "-name": "chmod",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "mode_t mode" }            ]          }        },        { "-name": "chsize" },        { "-name": "cin" },        { "-name": "circle" },        { "-name": "class" },        { "-name": "classic_table" },        { "-name": "clear" },        { "-name": "cleardevice" },        {          "-name": "clearerr",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "FILE *stream" }          }        },        { "-name": "clearviewport" },        {          "-name": "clock",          "-func": "yes",          "Overload": {            "-retVal": "clock_t",            "Param": { "-name": "void" }          }        },        { "-name": "clog" },        {          "-name": "close",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int filedes" }          }        },        {          "-name": "closedir",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "DIR *dirp" }          }        },        { "-name": "closegraph" },        { "-name": "clreol" },        { "-name": "clrscr" },        { "-name": "compare" },        { "-name": "complex" },        { "-name": "conj" },        { "-name": "const" },        { "-name": "construct" },        { "-name": "const_cast" },        { "-name": "const_pointer" },        { "-name": "const_reference" },        { "-name": "container" },        { "-name": "continue" },        { "-name": "copy" },        { "-name": "copyfmt" },        { "-name": "copy_backward" },        { "-name": "coreleft" },        {          "-name": "cos",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        {          "-name": "cosh",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "coshl" },        { "-name": "cosl" },        { "-name": "count" },        { "-name": "country" },        { "-name": "count_if" },        { "-name": "cout" },        { "-name": "cprintf" },        { "-name": "cputs" },        {          "-name": "creat",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "mode_t mode" }            ]          }        },        { "-name": "creatnew" },        { "-name": "creattemp" },        { "-name": "cscanf" },        {          "-name": "ctime",          "-func": "yes",          "Overload": {            "-retVal": "char *",            "Param": { "-name": "const time_t *timer" }          }        },        { "-name": "ctrlbrk" },        { "-name": "curr_symbol" },        { "-name": "c_str" },        { "-name": "data" },        { "-name": "date_order" },        { "-name": "deallocate" },        { "-name": "dec" },        { "-name": "decimal_point" },        { "-name": "default" },        { "-name": "delay" },        { "-name": "delete" },        { "-name": "delline" },        { "-name": "denorm_min" },        { "-name": "deque" },        { "-name": "destroy" },        { "-name": "detectgraph" },        { "-name": "difference_type" },        {          "-name": "difftime",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "time_t time1" },              { "-name": "time_t time0" }            ]          }        },        { "-name": "digits" },        { "-name": "digits10" },        { "-name": "disable" },        { "-name": "distance" },        {          "-name": "div",          "-func": "yes",          "Overload": {            "-retVal": "div_t",            "Param": [              { "-name": "int numer" },              { "-name": "int denom" }            ]          }        },        { "-name": "divides" },        { "-name": "dllexport" },        { "-name": "dllexport2" },        { "-name": "dllimport" },        { "-name": "dllimport2" },        { "-name": "do" },        { "-name": "dosexterr" },        { "-name": "dostounix" },        { "-name": "double" },        { "-name": "do_always_noconv" },        { "-name": "do_close" },        { "-name": "do_compare" },        { "-name": "do_curr_symbol" },        { "-name": "do_decimal_point" },        { "-name": "do_encoding" },        { "-name": "do_get" },        { "-name": "do_grouping" },        { "-name": "do_hash" },        { "-name": "do_in" },        { "-name": "do_is" },        { "-name": "do_length" },        { "-name": "do_max_length" },        { "-name": "do_narrow" },        { "-name": "do_neg_format" },        { "-name": "do_open" },        { "-name": "do_out" },        { "-name": "do_pos_format" },        { "-name": "do_scan_is" },        { "-name": "do_scan_not" },        { "-name": "do_thousands_sep" },        { "-name": "do_tolower" },        { "-name": "do_toupper" },        { "-name": "do_transform" },        { "-name": "do_widen" },        { "-name": "drawpoly" },        {          "-name": "dup",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int filedes" }          }        },        {          "-name": "dup2",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "int filedes" },              { "-name": "int filedes2" }            ]          }        },        { "-name": "dynamic_cast" },        { "-name": "eback" },        { "-name": "ecvt" },        { "-name": "egptr" },        { "-name": "ellipse" },        { "-name": "else" },        { "-name": "empty" },        { "-name": "enable" },        { "-name": "encoding" },        { "-name": "end" },        { "-name": "endl" },        { "-name": "ends" },        { "-name": "enum" },        { "-name": "eof" },        { "-name": "epptr" },        { "-name": "epsilon" },        { "-name": "eq" },        { "-name": "equal" },        { "-name": "equal_range" },        { "-name": "equal_to" },        { "-name": "eq_int_type" },        { "-name": "erase" },        { "-name": "event_callback" },        { "-name": "exceptions" },        {          "-name": "execl",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "const char *args" },              { "-name": "..." }            ]          }        },        {          "-name": "execle",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "const char *args" },              { "-name": "..." }            ]          }        },        {          "-name": "execlp",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *file" },              { "-name": "const char *args" },              { "-name": "..." }            ]          }        },        { "-name": "execlpe" },        {          "-name": "execv",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              {                "-name": "char *const argv[]"              }            ]          }        },        {          "-name": "execve",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              {                "-name": "char *const argv[]"              },              { "-name": "char *const *envp" }            ]          }        },        {          "-name": "execvp",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *file" },              {                "-name": "char *const argv[]"              }            ]          }        },        { "-name": "execvpe" },        {          "-name": "exit",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "int status" }          }        },        {          "-name": "exp",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "expl" },        { "-name": "explicit" },        { "-name": "extern" },        { "-name": "extern_type" },        {          "-name": "fabs",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "fabsl" },        { "-name": "facet" },        { "-name": "fail" },        { "-name": "failed" },        { "-name": "failure" },        { "-name": "false" },        { "-name": "falsename" },        { "-name": "farcalloc" },        { "-name": "farcoreleft" },        { "-name": "farfree" },        { "-name": "farheapcheck" },        { "-name": "farheapcheckfree" },        { "-name": "farheapchecknode" },        { "-name": "farheapfillfree" },        { "-name": "farheapwalk" },        { "-name": "farmalloc" },        { "-name": "farrealloc" },        {          "-name": "fclose",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "File *stream" }          }        },        { "-name": "fcloseall" },        { "-name": "fcvt" },        {          "-name": "fdopen",          "-func": "yes",          "Overload": {            "-retVal": "File *",            "Param": [              { "-name": "int filedes" },              { "-name": "const char *type" }            ]          }        },        {          "-name": "feof",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        {          "-name": "ferror",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        {          "-name": "fflush",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        {          "-name": "fgetc",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        { "-name": "fgetchar" },        {          "-name": "fgetpos",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "FILE *stream" },              { "-name": "fpos_t *pos" }            ]          }        },        {          "-name": "fgets",          "-func": "yes",          "Overload": {            "-retVal": "char *",            "Param": [              { "-name": "char *s" },              { "-name": "int n" },              { "-name": "FILE *stream" }            ]          }        },        { "-name": "filebuf" },        { "-name": "filelength" },        {          "-name": "fileno",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        { "-name": "fill" },        { "-name": "fillellipse" },        { "-name": "fillpoly" },        { "-name": "fill_n" },        { "-name": "find" },        { "-name": "findfirst" },        { "-name": "findnext" },        { "-name": "find_end" },        { "-name": "find_first_not_of" },        { "-name": "find_first_of" },        { "-name": "find_if" },        { "-name": "find_last_not_of" },        { "-name": "find_last_of" },        { "-name": "fixed" },        { "-name": "flags" },        { "-name": "flip" },        { "-name": "float" },        { "-name": "floodfill" },        {          "-name": "floor",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "floorl" },        { "-name": "flush" },        { "-name": "flushall" },        {          "-name": "fmod",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "double x" },              { "-name": "double y" }            ]          }        },        { "-name": "fmodl" },        { "-name": "fmtflags" },        { "-name": "fnmerge" },        { "-name": "fnsplit" },        {          "-name": "fopen",          "-func": "yes",          "Overload": {            "-retVal": "FILE *",            "Param": [              { "-name": "const char * file" },              { "-name": "const char * mode" }            ]          }        },        { "-name": "for" },        { "-name": "forward_iterator" },        { "-name": "for_each" },        {          "-name": "fprintf",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "FILE *stream" },              { "-name": "const char *format" },              { "-name": "..." }            ]          }        },        {          "-name": "fputc",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "int c" },              { "-name": "FILE *stream" }            ]          }        },        { "-name": "fputchar" },        {          "-name": "fputs",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *s" },              { "-name": "FILE *stream" }            ]          }        },        { "-name": "FP_OFF" },        { "-name": "FP_SEG" },        { "-name": "frac_digits" },        {          "-name": "fread",          "-func": "yes",          "Overload": {            "-retVal": "size_t",            "Param": [              { "-name": "void *ptr" },              { "-name": "size_t size" },              { "-name": "size_t nmemb" },              { "-name": "FILE *stream" }            ]          }        },        {          "-name": "free",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "void *ptr" }          }        },        { "-name": "freemem" },        { "-name": "freeze" },        {          "-name": "freopen",          "-func": "yes",          "Overload": {            "-retVal": "FILE *",            "Param": [              { "-name": "const char *filename" },              { "-name": "const char *mode" },              { "-name": "FILE *stream" }            ]          }        },        {          "-name": "frexp",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "double value" },              { "-name": "int *exp" }            ]          }        },        { "-name": "frexpl" },        { "-name": "friend" },        { "-name": "front" },        { "-name": "front_inserter" },        { "-name": "front_insert_iterator" },        {          "-name": "fscanf",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "FILE *stream" },              { "-name": "const char *format" },              { "-name": "..." }            ]          }        },        {          "-name": "fseek",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "FILE *stream" },              { "-name": "long int offset" },              { "-name": "int whence" }            ]          }        },        {          "-name": "fsetpos",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "FILE *stream" },              { "-name": "const fpos_t * pos" }            ]          }        },        {          "-name": "fstat",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "int filedes" },              { "-name": "struct stat *buf" }            ]          }        },        { "-name": "fstream" },        {          "-name": "ftell",          "-func": "yes",          "Overload": {            "-retVal": "long int",            "Param": { "-name": "FILE *stream" }          }        },        { "-name": "ftime" },        {          "-name": "fwrite",          "-func": "yes",          "Overload": {            "-retVal": "size_t",            "Param": [              { "-name": "const void *ptr" },              { "-name": "size_t size" },              { "-name": "size_t nmemb" },              { "-name": "FILE *stream" }            ]          }        },        { "-name": "gbump" },        { "-name": "gcount" },        { "-name": "gcvt" },        { "-name": "generate" },        { "-name": "generate_n" },        { "-name": "geninterrupt" },        { "-name": "get" },        { "-name": "getarccoords" },        { "-name": "getaspectratio" },        { "-name": "getbkcolor" },        {          "-name": "getc",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "FILE *stream" }          }        },        { "-name": "getcbrk" },        { "-name": "getch" },        {          "-name": "getchar",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "void" }          }        },        { "-name": "getche" },        { "-name": "getcolor" },        { "-name": "getcurdir" },        {          "-name": "getcwd",          "-func": "yes",          "Overload": {            "-retVal": "char *",            "Param": [              { "-name": "char *buf" },              { "-name": "size_t size" }            ]          }        },        { "-name": "getdate" },        { "-name": "getdefaultpalette" },        { "-name": "getdfree" },        { "-name": "getdisk" },        { "-name": "getdrivername" },        { "-name": "getdta" },        {          "-name": "getenv",          "-func": "yes",          "Overload": {            "-retVal": "char *",            "Param": { "-name": "const char *name" }          }        },        { "-name": "getfat" },        { "-name": "getfatd" },        { "-name": "getfillpattern" },        { "-name": "getfillsettings" },        { "-name": "getftime" },        { "-name": "getgraphmode" },        { "-name": "getimage" },        { "-name": "getline" },        { "-name": "getlinesettings" },        { "-name": "getloc" },        { "-name": "getmaxcolor" },        { "-name": "getmaxmode" },        { "-name": "getmaxx" },        { "-name": "getmaxy" },        { "-name": "getmodename" },        { "-name": "getmoderange" },        { "-name": "getpalette" },        { "-name": "getpalettesize" },        { "-name": "getpass" },        {          "-name": "getpid",          "-func": "yes",          "Overload": {            "-retVal": "pid_t",            "Param": { "-name": "void" }          }        },        { "-name": "getpixel" },        { "-name": "getpsp" },        {          "-name": "gets",          "-func": "yes",          "Overload": {            "-retVal": "char *",            "Param": { "-name": "char *s" }          }        },        { "-name": "gettext" },        { "-name": "gettextinfo" },        { "-name": "gettextsettings" },        { "-name": "gettime" },        { "-name": "getvect" },        { "-name": "getverify" },        { "-name": "getviewsettings" },        { "-name": "getw" },        { "-name": "getx" },        { "-name": "gety" },        { "-name": "get_allocator" },        { "-name": "get_date" },        { "-name": "get_monthname" },        { "-name": "get_temporary_buffer" },        { "-name": "get_time" },        { "-name": "get_weekday" },        { "-name": "get_year" },        {          "-name": "gmtime",          "-func": "yes",          "Overload": {            "-retVal": "struct tm *",            "Param": { "-name": "const time_t *timer" }          }        },        { "-name": "good" },        { "-name": "goto" },        { "-name": "gotoxy" },        { "-name": "gptr" },        { "-name": "graphdefaults" },        { "-name": "grapherrormsg" },        { "-name": "graphresult" },        { "-name": "greater" },        { "-name": "greater_equal" },        { "-name": "grouping" },        { "-name": "harderr" },        { "-name": "hardresume" },        { "-name": "hardretn" },        { "-name": "hash" },        { "-name": "has_denorm" },        { "-name": "has_infinity" },        { "-name": "has_quiet_NaN" },        { "-name": "has_signaling_NaN" },        { "-name": "heapcheck" },        { "-name": "heapcheckfree" },        { "-name": "heapchecknode" },        { "-name": "heapfillfree" },        { "-name": "heapwalk" },        { "-name": "hex" },        { "-name": "highvideo" },        { "-name": "hypot" },        { "-name": "hypotl" },        { "-name": "id" },        { "-name": "if" },        { "-name": "ifstream" },        { "-name": "ignore" },        { "-name": "imag" },        { "-name": "imagesize" },        { "-name": "imbue" },        { "-name": "in" },        { "-name": "includes" },        { "-name": "infinity" },        { "-name": "init" },        { "-name": "initgraph" },        { "-name": "inline" },        { "-name": "inner_product" },        { "-name": "inp" },        { "-name": "inplace_merge" },        { "-name": "inport" },        { "-name": "inportb" },        { "-name": "input_iterator" },        { "-name": "inpw" },        { "-name": "insert" },        { "-name": "inserter" },        { "-name": "insert_iterator" },        { "-name": "insline" },        { "-name": "installuserdriver" },        { "-name": "installuserfont" },        { "-name": "int" },        { "-name": "int86" },        { "-name": "int86x" },        { "-name": "intdos" },        { "-name": "intdosx" },        { "-name": "internal" },        { "-name": "intern_type" },        { "-name": "Intl" },        { "-name": "intr" },        { "-name": "int_type" },        { "-name": "ioctl" },        { "-name": "ios" },        { "-name": "iostate" },        { "-name": "ios_type" },        { "-name": "is" },        {          "-name": "isalnum",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isalpha",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        { "-name": "isascii" },        {          "-name": "isatty",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int filedes" }          }        },        {          "-name": "iscntrl",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isdigit",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isgraph",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "islower",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isprint",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "ispunct",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isspace",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        { "-name": "istream" },        { "-name": "istream_type" },        { "-name": "istringstream" },        {          "-name": "isupper",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        {          "-name": "isxdigit",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": { "-name": "int c" }          }        },        { "-name": "is_bounded" },        { "-name": "is_exact" },        { "-name": "is_iec559" },        { "-name": "is_integer" },        { "-name": "is_modulo" },        { "-name": "is_open" },        { "-name": "is_signed" },        { "-name": "is_specialized" },        { "-name": "is_sync" },        { "-name": "iter_swap" },        { "-name": "iter_type" },        { "-name": "itoa" },        { "-name": "iword" },        { "-name": "kbhit" },        { "-name": "keep" },        { "-name": "key_comp" },        {          "-name": "labs",          "-func": "yes",          "Overload": {            "-retVal": "long int",            "Param": { "-name": "long int i" }          }        },        {          "-name": "ldexp",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "double x" },              { "-name": "int exp" }            ]          }        },        { "-name": "ldexpl" },        {          "-name": "ldiv",          "-func": "yes",          "Overload": {            "-retVal": "ldiv_t",            "Param": [              { "-name": "long int numer" },              { "-name": "long int denom" }            ]          }        },        { "-name": "left" },        { "-name": "length" },        { "-name": "less" },        { "-name": "less_equal" },        { "-name": "lexicographical_compare" },        { "-name": "lfind" },        { "-name": "line" },        { "-name": "linerel" },        { "-name": "lineto" },        { "-name": "list" },        {          "-name": "localeconv",          "-func": "yes",          "Overload": {            "-retVal": "struct lconv *",            "Param": { "-name": "void" }          }        },        {          "-name": "localtime",          "-func": "yes",          "Overload": {            "-retVal": "struct tm *",            "Param": { "-name": "const time_t *timer" }          }        },        { "-name": "lock" },        { "-name": "locking" },        {          "-name": "log",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        {          "-name": "log10",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": { "-name": "double x" }          }        },        { "-name": "log10l" },        { "-name": "logical_and" },        { "-name": "logical_not" },        { "-name": "logical_or" },        { "-name": "logl" },        { "-name": "long" },        {          "-name": "longjmp",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": [              { "-name": "jmp_buf env" },              { "-name": "int val" }            ]          }        },        { "-name": "lower_bound" },        { "-name": "lowvideo" },        { "-name": "lsearch" },        {          "-name": "lseek",          "-func": "yes",          "Overload": {            "-retVal": "off_t",            "Param": [              { "-name": "int filedes" },              { "-name": "off_t offset" },              { "-name": "int whence" }            ]          }        },        { "-name": "lt" },        { "-name": "ltoa" },        { "-name": "make_heap" },        { "-name": "make_pair" },        {          "-name": "malloc",          "-func": "yes",          "Overload": {            "-retVal": "void",            "Param": { "-name": "size_t size" }          }        },        { "-name": "map" },        { "-name": "matherr" },        { "-name": "max" },        { "-name": "max_element" },        { "-name": "max_exponent" },        { "-name": "max_exponent10" },        { "-name": "max_length" },        { "-name": "max_size" },        {          "-name": "mblen",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *s" },              { "-name": "size_t n" }            ]          }        },        {          "-name": "mbstowcs",          "-func": "yes",          "Overload": {            "-retVal": "size_t",            "Param": [              { "-name": "wchar_t *pwcs" },              { "-name": "const char *s" },              { "-name": "size_t n" }            ]          }        },        {          "-name": "mbtowc",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "wchar_t *pwc" },              { "-name": "const char *s" },              { "-name": "size_t n" }            ]          }        },        { "-name": "memccpy" },        {          "-name": "memchr",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "const void *s" },              { "-name": "int c" },              { "-name": "size_t n" }            ]          }        },        {          "-name": "memcmp",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const void *s1" },              { "-name": "const void *s2" },              { "-name": "size_t n" }            ]          }        },        {          "-name": "memcpy",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "void *s1" },              { "-name": "const void *s2" },              { "-name": "size_t n" }            ]          }        },        { "-name": "memicmp" },        {          "-name": "memmove",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "void * s1" },              { "-name": "const void *s2" },              { "-name": "size_t n" }            ]          }        },        {          "-name": "memset",          "-func": "yes",          "Overload": {            "-retVal": "void *",            "Param": [              { "-name": "void *s" },              { "-name": "int c" },              { "-name": "size_t n" }            ]          }        },        { "-name": "merge" },        { "-name": "min" },        { "-name": "minus" },        { "-name": "min_element" },        { "-name": "min_exponent" },        { "-name": "min_exponent10" },        { "-name": "mismatch" },        {          "-name": "mkdir",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "mode_t mode" }            ]          }        },        { "-name": "mktemp" },        {          "-name": "mktime",          "-func": "yes",          "Overload": {            "-retVal": "time_t",            "Param": { "-name": "struct tm *timer" }          }        },        { "-name": "MK_FP" },        {          "-name": "modf",          "-func": "yes",          "Overload": {            "-retVal": "double",            "Param": [              { "-name": "double value" },              { "-name": "double *iptr" }            ]          }        },        { "-name": "modfl" },        { "-name": "modulus" },        { "-name": "move" },        { "-name": "movedata" },        { "-name": "moverel" },        { "-name": "movetext" },        { "-name": "moveto" },        { "-name": "movmem" },        { "-name": "multimap" },        { "-name": "multiset" },        { "-name": "mutable" },        { "-name": "name" },        { "-name": "namespace" },        { "-name": "narrow" },        { "-name": "negate" },        { "-name": "negative_sign" },        { "-name": "neg_format" },        { "-name": "new" },        { "-name": "next_permutation" },        { "-name": "noboolalpha" },        { "-name": "none" },        { "-name": "norm" },        { "-name": "normvideo" },        { "-name": "noshowbase" },        { "-name": "noshowpoint" },        { "-name": "noshowpos" },        { "-name": "noskipws" },        { "-name": "nosound" },        { "-name": "not1" },        { "-name": "not2" },        { "-name": "not_eof" },        { "-name": "not_equal_to" },        { "-name": "nounitbuf" },        { "-name": "nouppercase" },        { "-name": "nth_element" },        { "-name": "numeric_limits" },        { "-name": "oct" },        { "-name": "off_type" },        { "-name": "ofstream" },        {          "-name": "open",          "-func": "yes",          "Overload": {            "-retVal": "int",            "Param": [              { "-name": "const char *path" },              { "-name": "int oflag" },              { "-name": "..." }            ]          }        },        {          "-name": "opendir",          "-func": "yes",          "Overload": {            "-retVal": "DIR *",            "Param": { "-name": "const char *dirname" }          }        },        { "-name": "openmode" },        { "-name": "operator!" },        { "-name": "operator!=" },        { "-name": "operator" }      ]    }  }}</string>
    <string name="testJson">{ "-name": "auto" }</string>
</resources>
